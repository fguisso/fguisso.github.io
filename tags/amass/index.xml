<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>amass on Fernando Guisso</title>
    <link>https://fguisso.github.io/tags/amass/</link>
    <description>Recent content in amass on Fernando Guisso</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 16 Mar 2022 00:00:45 -0300</lastBuildDate><atom:link href="https://fguisso.github.io/tags/amass/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automa√ß√£o b√°sica de Recon utilizando o Github Actions</title>
      <link>https://fguisso.github.io/posts/github-actions-recon/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:45 -0300</pubDate>
      
      <guid>https://fguisso.github.io/posts/github-actions-recon/</guid>
      <description>Demostra√ß√£o de como utilizar o Github Actions para automatizar um Recon</description>
      <content:encoded><![CDATA[<p>Atualmente vem crescendo o n√∫mero de empresas que utilizam solu√ß√µes de CI(Continuous Integration) e CD(Continuous Deploy) para automatizar o processo do ciclo de vida do software(SLD). As ferramentas mais utilizadas s√£o Jenkins, Github Actions, Gitlab CI e por a√≠ vai. Estas ferramentas trazem a facilidade de automatizar os testes de software, linters de c√≥digo, cria√ß√£o de releases e vers√µes finais do software.</p>
<p>No mundo da seguran√ßa algumas empresas tamb√©m j√° est√£o implementando os testes de seguran√ßa est√°ticos(SAST) e testes de composi√ß√£o de software(SCA) comprometidos. A cada adi√ß√£o de c√≥digo ou feature, agora o software pode ser testado antes de ir para produ√ß√£o.</p>
<p>A ideia de trabalhar com ferramentas de seguran√ßa no CI/CD vai al√©m do fato de automatizar tarefas, mas tamb√©m de trazer a cultura de seguran√ßa da informa√ß√£o para os times de desenvolvedores e times de infraestrutura, a famosa cultura de DevSecOps. Muito importante no momento que passamos onde os times de desenvolvimento est√£o escalando absurdamente e n√£o temos especialistas de seguran√ßa para acompanhar estes times.</p>
<h2 id="casos-de-usos-para-al√©m-dos-testes-est√°ticossast-e-sca">Casos de usos para al√©m dos testes est√°ticos(SAST e SCA)</h2>
<p>O caso mais simples de uso que podemos abordar √© testes din√¢micos de seguran√ßa agendados para acontecer periodicamente, levando em conta que a aplica√ß√£o j√° esteja em produ√ß√£o.</p>
<p>Outros casos interessantes seria a possibilidade de times de Red Team, se aproveitarem das notifica√ß√µes de eventos de uma pipeline, para lan√ßar testes automatizados assim que comece o desenvolvimento de uma nova feature. Irei abordar este tema mais a fundo em outro artigo.</p>
<p>O que vamos explorar mais neste artigo √© o reconhecimento de aplica√ß√£o j√° em produ√ß√£o, onde vamos apontar um dom√≠nio para nosso CI que vai rodar periodicamente algumas ferramentas de reconhecimento, o que pode ser usado depois pelos times de seguran√ßa para futuras an√°lises de seguran√ßa.</p>
<h2 id="github-e-github-actions">Github e Github Actions</h2>
<p>Vamos utilizar o Github para versionar e armazenar nosso projeto, ent√£o acesse github.com e crie um novo reposit√≥rio. Agora vamos criar e editar alguns arquivos, caso voc√™ n√£o conhe√ßa bem o funcionamento do Github, pode usar a interface gr√°fica mesmo.
O Github Actions j√° √© um servi√ßo habilitado do Github, bastando apenas que voc√™ coloque os arquivos de configura√ß√£o da pipeline em uma pasta chamada <code>.github/workflows</code> e todas as intera√ß√µes e logs desta pipeline ser√£o vis√≠veis na aba actions.</p>
<p>Para facilitar a cria√ß√£o de pipelines, o Github Actions oferece as Actions, que s√£o conjuntos de configura√ß√µes e instala√ß√µes prontas para voc√™ utilizar na sua pipeline, sem a necessidade de voc√™ se preocupar com isso. Algumas Actions oficiais est√£o dispon√≠veis no Marketplace do Github, por√©m voc√™ pode utilizar diretamente qualquer Action que seja um reposit√≥rio no Github.</p>
<p>Saiba mais sobre as Actions aqui e o link para o marketplace.</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/5755568/158624544-226a1e59-fef5-441e-beca-73b66c30dd5d.png" alt="image"  />

<em>Exemplos de arquivos workflow separados.</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/5755568/158624831-2aebfc25-a58b-49b2-91cb-33d17f0f77c2.png" alt="image"  />

<em>Aba de recursos do Github Actions com workflows configurados.</em></p>
<h3 id="amass-action">Amass Action</h3>
<p>Amass de acordo com sua documenta√ß√£o oficial:</p>
<p>O projeto OWASP Amass realiza mapeamento de rede de superf√≠cies de ataque e descoberta de ativos externos usando coleta de informa√ß√µes de c√≥digo aberto e t√©cnicas de reconhecimento ativo.</p>
<p>Amass √© uma ferramenta muito poderosa que nos fornece fun√ß√µes para o reconhecimento e tamb√©m para o gerenciamento das informa√ß√µes coletadas. Em nosso caso, vamos utilizar o Amass Action apenas para enumerar um dom√≠nio e trazer o resultado em um arquivo txt para usar posteriormente.</p>
<p>Em seu reposit√≥rio crie um arquivo chamado <code>amass.yml</code> dentro da pasta <code>.github/workflows</code> e adicione estas configura√ß√µes e vamos analisar linha a linha o que estamos fazendo:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">üîé Recon</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">recon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-go@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">go-version</span><span class="p">:</span><span class="w"> </span><span class="m">1.17</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Amass - Enumeration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">fguisso/amass-action@main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">domains</span><span class="p">:</span><span class="w"> </span><span class="l">owasp.org</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">brute</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">GitHub Workflow artifacts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-artifact@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Obs: arquivos .yml/.yaml s√£o fortemente identados, ent√£o os tabs e espa√ßos dentro do arquivo precisam estar corretos para n√£o acontecer erros. Voc√™ pode utilizar o pr√≥prio Github para validar seu arquivo ou utilizar um linter de arquivos YAML.</p>
<p>Na primeira linha <code>name:</code> √© apenas um identificador para sua pipeline ser facilmente encontrada dentro da aba Actions do Github.</p>
<p>Depois do <code>on:</code> √© onde podemos automatizar para que o workflow inicie de acordo com algum evento programado, podendo ser acionada por um ou mais eventos, no momento escolhemos <code>workflow_dispatch:</code> para que ela fique dispon√≠vel no dashboard de Actions e possamos ativar a qualquer momento. Mais para o final veremos como disparar este workflow agendada para rodar 1 vez por semana, mas voc√™ tamb√©m pode disparar usando eventos do Git como, disparar sempre que houver um Pull Request na branch de desenvolvimento, disparar apenas quando acontecer um Merge do branch principal.</p>
<p><code>jobs:</code> √© onde podemos separar Actions para rodar em paralelo, como estamos usando a vers√£o Free do Github Actions, vamos tentar manter sempre apenas um job executando tudo o que precisarmos.</p>
<p>Os primeiros <code>steps</code> vou resumir como apenas configura√ß√µes para compilar e rodar a ferramenta Amass que √© desenvolvida em Golang. Geralmente quando voc√™ for usar uma Action, as configura√ß√µes necess√°rias estar√£o na documenta√ß√µes, n√£o se preocupe.</p>
<p>Depois dos <code>steps</code> iniciais, vamos chamar o Amass Action utilizando o endere√ßo da Action no Github, <code>uses: fguisso/amass-action@main</code> e passar alguns inputs de configura√ß√µes:</p>
<p><code>domains:</code> vou utilizar o dom√≠nio da owasp.org para ser nosso target, voc√™ pode utilizar o dom√≠nio de sua aplica√ß√£o ou tamb√©m passar mais de um dom√≠nio separados por v√≠rgula.</p>
<p>Vamos habilitar o <code>brute:</code> para fazer um brute force nas pesquisas encontradas e para finalizar vamos passar o nome do arquivo final <code>output: hosts.txt</code>, onde vamos armazenar os resultados.</p>
<p>Bom, at√© aqui j√° fizemos todo o processo de utilizar uma ferramenta pelo Github Actions, mas devido ao como funciona uma pipeline automatizada, todo <code>job</code> que rodamos, vai subir uma nova m√°quina e no final do processo ela √© desligada e deletada, n√£o segurando nenhuma informa√ß√£o ou arquivos criados. Sendo assim, precisamos pegar o nosso arquivo final <code>hosts.txt</code> e salvar em algum lugar para ser consultado posteriormente. Temos v√°rias op√ß√µes como fazer o upload do arquivo para outra m√°quina, salvar o resultado no pr√≥prio reposit√≥rio Git, utilizando o Github Actions podemos tamb√©m criar e interagir com as Issues ou Pull Request e o mais utilizado para servi√ßos de CI/CD √© criar um artefato do seu <code>job</code>, que √© o que vamos fazer.</p>
<p>No ultimo <code>step</code> iniciamos uma outra Action que serve para fazer o upload de arquivos para os artefatos do seu workflow, apenas bastando passar o nome do arquivo atual e qual o nome final que ficar√° dispon√≠vel dentro dos artefatos deste workflow.</p>
<p>Agora vamos rodar nosso workflow manualmente, basta ir na aba Actions do seu reposit√≥rio, escolher o workflow Amass Enum e clicar no bot√£o Run Workflow.
<img loading="lazy" src="https://user-images.githubusercontent.com/5755568/158627084-09f2ab97-6d95-439e-9241-6557a5e72aef.png" alt="image"  />
</p>
<p>Logo apos voc√™ podera ver seu workflow rodando e caso queira acompanhar os <code>steps</code> e logs, √© s√≥ clicar no seu <code>job</code> <code>amass-scan</code>.</p>
<p>Assim que o workflow finalizar todos os <code>steps</code> voc√™ vai conseguir ver os resultados e seu artefato estar√° dispon√≠vel para download:</p>
<h3 id="naabu-action">Naabu Action</h3>
<p>Naabu √© uma ferramenta de scan de portas, onde ele vai procurar as portas abertas e ativas de um determinado host. Os criadores do projeto mant√©m uma vers√£o oficial de uma Github Actions para rodar o Naabu, ent√£o vamos seguir a documenta√ß√£o deles para seguir com o nosso workflow de recon.</p>
<p>Vamos adicionar a Naabu Action para fazermos o reconhecimento das portas dessa lista de dom√≠nios que o Amass nos entregou. Como um depende do resultado do outro, vamos colocar na sequ√™ncia de <code>steps</code> para que seja executado logo em seguida caso n√£o tenha nenhum erro na execu√ß√£o do passo anterior.</p>
<p>Como estamos trabalhando com apenas um <code>job</code>, o Github Actions sobe uma m√°quina com algumas configura√ß√µes e ao final do processo esta m√°quina vai ser desligada e removida, com tudo o que foi gerado dentro dela. J√° que n√£o finalizamos nosso <code>job</code> ainda, ent√£o o arquivo <code>hosts.txt</code> ainda est√° dispon√≠vel. Caso voc√™ queira manter estes resultados, precisamos fazer como anteriormente e passar os arquivos de resultado para os artefatos deste <code>job</code>.</p>
<p>Para simplificar, vamos passar os arquivos direto para apenas um artefato, assim o Github vai criar um arquivo .zip final para voc√™ com todos estes arquivos dentro.</p>
<h3 id="nuclei-action">Nuclei Action</h3>
<p>Nuclei √© uma ferramenta de scan de vulnerabilidades baseado em templates, com a ajuda da comunidade hoje existem mais de 1000 templates prontos para usar que v√£o testar sua aplica√ß√£o em busca de vulnerabilidades conhecidas. Assim como Naabu, tamb√©m temos um Action oficial do Nuclei que vamos utilizar: <a href="https://github.com/marketplace/actions/nuclei-dast-scan">https://github.com/marketplace/actions/nuclei-dast-scan</a></p>
<p>Com o resultado anterior, agora temos os hosts e suas portas ativas, vamos passar para o nuclei verificar se em todos estes servi√ßos encontrados, achamos alguma vulnerabilidade.</p>
<h3 id="rodando-seu-workflow-manualmente">Rodando seu workflow manualmente</h3>
<p>Com tudo configurado, agora podemos rodar o nosso workflow manualmente. Basta acessar a aba Actions no seu reposit√≥rio, selecionar seu workflow e clicar em <code>Run workflow</code>.</p>
<p>Voc√™ pode acompanhar a execu√ß√£o do seu workflow ou apenas esperar at√© o √≠cone ficar verde, o que quer dizer que todas os <code>steps</code> aconteceram de forma correta e provavelmente voc√™ pode baixar seus resultados no campo de artefatos.</p>
<p>Sempre que quiser, voc√™ pode atualizar o dom√≠nio que quer escanear e tamb√©m pode acrescentar mais de um dom√≠nio utilizando apenas v√≠rgulas para separ√°-los. Ex: <code>owasp.org,github.com</code>.</p>
<h3 id="eventos-para-automatizar">Eventos para automatizar</h3>
<p>Como j√° falado anteriormente, os workflows podem responder a eventos espec√≠ficos para poder rodar e aqui vamos apenas criar um agendamento, para que possamos rodar nosso workflow uma vez por semana.</p>
<p>Podemos agendar usando express√µes cron schedule, assim nosso workflow vai executar uma vez por semana, toda segunda feira as 00:00.</p>
<p>N√£o remova a linha <code>workflow_dispatch</code> a n√£o ser que voc√™ j√° esteja certo de que n√£o vai usar mais o bot√£o de disparo manual.</p>
<p>Aqui tem uma lista de outros eventos que voc√™ pode utilizar para executar seus workflows automaticamente. Leia mais sobre na documenta√ß√£o do Github Actions <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on">https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on</a>.</p>
<p><a href="https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow">https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
