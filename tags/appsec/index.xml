<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>appsec on Fernando Guisso</title>
    <link>https://fguisso.github.io/tags/appsec/</link>
    <description>Recent content in appsec on Fernando Guisso</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Mar 2022 00:00:46 -0300</lastBuildDate><atom:link href="https://fguisso.github.io/tags/appsec/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic Recon Automation Using Github Actions</title>
      <link>https://fguisso.github.io/posts/github-actions-recon-en/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:46 -0300</pubDate>
      
      <guid>https://fguisso.github.io/posts/github-actions-recon-en/</guid>
      <description>Demonstration of how to use Github Actions to automate a Recon</description>
      <content:encoded><![CDATA[<p>Currently, the number of companies using CI (Continuous Integration) and CD (Continuous Deploy) solutions to automate the software lifecycle process (SLD) is growing. The most used tools are Jenkins, Github Actions, Gitlab CI, and so on. These tools bring the ease of automating software testing, code linters, creating releases, and final versions of the software.</p>
<p>In the security world, some companies are also already implementing static security testing (SAST) and compromised software composition testing (SCA). With each addition of code or feature, the software can now be tested before going into production.</p>
<p>The idea of working with security tools in CI/CD goes beyond the fact of automating tasks, but also of bringing the culture of information security to the teams of developers and infrastructure teams, the famous culture of DevSecOps. Very important at the moment we go through where development teams are scaling absurdly and we don&rsquo;t have security experts to accompany these teams.</p>
<p>Link for the projects repository: <a href="https://github.com/fguisso/ga-recon">https://github.com/fguisso/ga-recon</a></p>
<h2 id="use-cases-beyond-static-tests-sast-and-sca">Use cases beyond static tests (SAST and SCA)</h2>
<p>The simplest use case we can address is dynamic security tests scheduled to take place periodically, taking into account that the application is already in production.</p>
<p>Other interesting cases would be the possibility of Red Team teams, taking advantage of the event notifications of a pipeline, to launch automated tests as soon as the development of a new feature begins. I will address this topic in more depth in another article.</p>
<p>What we will explore more in this article is the recognition of applications already in production, where we will point a domain to our CI that will periodically run some recognition tools, which can be used later by security teams for future security analyses.</p>
<h2 id="github-and-github-actions">Github and Github Actions</h2>
<p>We are going to use Github to version and store our project, so go to github.com and create a new repository. Now let&rsquo;s create and edit some files, if you don&rsquo;t know how Github works, you can use the graphical interface.
Github Actions is already an enabled Github service, just put the pipeline configuration files in a folder called <code>.github/workflows</code> and all interactions and logs of this pipeline will be visible in the actions tab.</p>
<p>To facilitate the creation of pipelines, Github Actions offers Actions, which are sets of configurations and installations ready for you to use in your pipeline, without you having to worry about it. Some official Actions are available on the Github Marketplace, however, you can directly use any Action that is a repository on Github.</p>
<p>Learn more about Actions <a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions">here</a> and the <a href="https://github.com/marketplace?type=actions">link</a> to the marketplace.</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/5755568/158624544-226a1e59-fef5-441e-beca-73b66c30dd5d.png" alt="image"  />

<em>Examples of separate workflow files.</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/5755568/158624831-2aebfc25-a58b-49b2-91cb-33d17f0f77c2.png" alt="image"  />

<em>Github Actions resource tab with configured workflows.</em></p>
<h3 id="amass-action">Amass Action</h3>
<p>Amass according to its official documentation:</p>
<p>The OWASP Amass project performs attack surface network mapping and external asset discovery using open-source intelligence gathering and active reconnaissance techniques.</p>
<p>Amass is a very powerful tool that provides us with functions for the recognition and also for the management of the collected information. In our case, we are going to use the Amass Action just to enumerate a domain and bring the result in a txt file for later use.</p>
<p>In your repository create a file called <code>amass.yml</code> inside the <code>.github/workflows</code> folder and add these settings and let&rsquo;s analyze what we are doing line by line:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ðŸ”Ž Recon</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">recon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-go@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">go-version</span><span class="p">:</span><span class="w"> </span><span class="m">1.17</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Amass - Enumeration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">fguisso/amass-action@main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">domains</span><span class="p">:</span><span class="w"> </span><span class="l">owasp.org</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">brute</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">GitHub Workflow artifacts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-artifact@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Note: .yml/.yaml files are heavily indented, so the tabs and spaces within the file must be correct to avoid errors. You can use Github itself to validate your file or use a linter of YAML files.</p>
<p>On the first line <code>name:</code> â€‹â€‹is just an identifier for your pipeline to be easily found within the Actions tab of Github.</p>
<p>After <code>on:</code> is where we can automate so that the workflow starts according to some programmed event, which can be triggered by one or more events, at the moment we choose <code>workflow_dispatch:</code> so that it is available in the Actions dashboard and we can activate any time. Towards the end, we will see how to trigger this workflow scheduled to run once a week, but you can also trigger it using Git events like trigger whenever there is a Pull Request in the development branch, trigger only when a Merge from the main branch happens.</p>
<p><code>jobs:</code> is where we can separate Actions to run in parallel, as we are using the Free version of Github Actions, we will try to always keep just one job running everything we need. <a href="https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow">Job documentation link</a>.</p>
<p>The first <code>steps</code> I will summarize as just settings to compile and run the Amass tool which is developed in Golang. Usually, when you are going to use an Action, the necessary settings will be in the documentation, don&rsquo;t worry.</p>
<p>After the initial <code>steps</code>, let&rsquo;s call the Amass Action using the Action&rsquo;s Github address, <code>uses: fguisso/amass-action@main</code> and pass in some configuration inputs:</p>
<p><code>domains:</code> I will use the domain of owasp.org to be our target, you can use the domain of your application or also pass more than one domain separated by commas.</p>
<p>Let&rsquo;s enable <code>brute:</code> to brute force the searches found and finally pass the name of the final file <code>output: hosts.txt</code>, where we will store the results.</p>
<p>Well, so far we&rsquo;ve done the whole process of using a tool through Github Actions, but due to how an automated pipeline works, every <code>job</code> that we run, will upload a new machine and at the end of the process it is turned off and deleted, no holding no information or files created. So, we need to get our final <code>hosts.txt</code> file and save it somewhere for later reference. We have several options such as uploading the file to another machine, saving the result in the Git repository, using Github Actions we can also create and interact with Issues or Pull Requests and the most used for CI/CD services is to create an artifact of your <code>job</code>, which is what we are going to do.</p>
<p>In the last <code>step</code> we start another Action that serves to upload files for the artifacts of your workflow, just passing the name of the current file and the final name that will be available within the artifacts of this workflow.</p>
<p>Now let&rsquo;s run our workflow manually, just go to the Actions tab of your repository, choose the Amass Enum workflow, and click on the Run Workflow button.
<img loading="lazy" src="https://user-images.githubusercontent.com/5755568/158627084-09f2ab97-6d95-439e-9241-6557a5e72aef.png" alt="image"  />
</p>
<p>Right after you can see your workflow running and if you want to follow the <code>steps</code> and logs, just click on your <code>job</code> <code>recon</code>.</p>
<p>Once the workflow finishes all the <code>steps</code> you will be able to see the results and your artifact will be available for download:</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/5755568/158697555-07a8c02a-8132-45e8-ab55-4a3d790cf092.png" alt="image"  />
</p>
<h3 id="naabu-action">Naabu Action</h3>
<p>Naabu is a port scan tool where it will look for the open and active ports of a given host. The creators of the project maintain an official version of a Github Actions to run Naabu, so let&rsquo;s follow their documentation to follow our recon workflow.</p>
<p>Let&rsquo;s add the Naabu Action to port recognition from this list of domains that Amass has given us. As one depends on the result of the other, let&rsquo;s put it in the sequence of <code>steps</code> so that it will be executed right away if there is no error in the execution of the previous step.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Naabu - Port Scannner</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">projectdiscovery/naabu-action@main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">list</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">urls.txt</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>As we are working with just one <code>job</code>, Github Actions goes up a machine with some configurations and at the end of the process, this machine will be turned off and removed, with everything that was generated inside it. Since we haven&rsquo;t finished our <code>job</code> yet, so the <code>hosts.txt</code> file is still available. In case you want to keep these results, we need to do as before and pass the result files to the artifacts of this <code>job</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">GitHub Workflow artifacts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-artifact@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            hosts.txt
</span></span></span><span class="line"><span class="cl"><span class="sd">            urls.txt</span><span class="w">            
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>For simplicity, let&rsquo;s pass the files straight to just one artifact, so Github will create a final .zip file for you with all these files inside.</p>
<h3 id="nuclei-action">Nuclei Action</h3>
<p>Nuclei is a template-based vulnerability scanning tool, with the help of the community today there are over 1000 ready-to-use templates that will test your application for known vulnerabilities. Like Naabu, we also have an official Nuclei Action that we will use: <a href="https://github.com/marketplace/actions/nuclei-dast-scan">https://github.com/marketplace/actions/nuclei-dast-scan</a></p>
<p><strong>Attention!</strong> Due to a bug found in the ProjectDiscovery Actions, I will use a fork of my own where I fixed the problem, as soon as the correction is included in the official project, I will update the article and change <code>fguisso/nuclei- action@inputs</code> by <code>projectdiscovery/nuclei-action@main</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Nuclei - DAST Scan</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">fguisso/nuclei-action@inputs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">urls</span><span class="p">:</span><span class="w"> </span><span class="l">urls.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">nuclei.txt</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>As a previous result, now we have the hosts and their active ports, let&rsquo;s move to the cores to check if all these services are found, we find any vulnerability.</p>
<h3 id="running-your-workflow-manually">Running your workflow manually</h3>
<p>With everything configured, we can now run our workflow manually. Just access the Actions tab in your repository, select your workflow and click on <code>Run workflow</code>.</p>
<p>You can follow the execution of your workflow or just wait until the icon turns green, which means that all the <code>steps</code> happened correctly and you can probably download your results in the artifacts field.</p>
<p>Whenever you want, you can update the domain you want to scan and you can also add more than one domain using just commas to separate them. Ex: <code>owasp.org,github.com</code>.</p>
<h3 id="events-to-dispatch">Events to dispatch</h3>
<p>As mentioned before, workflows can respond to specific events to be able to run, and here we are just going to create a schedule so that we can run our workflow once a week.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">schedule</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">cron</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0 0 * * 0&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>We can schedule using cron schedule expressions, so our workflow will run once a week, every Sunday at 00:00.</p>
<p>Do not remove the <code>workflow_dispatch</code> line unless you are already certain that you will no longer use the manual trigger button.</p>
<p>Here is a list of other events that you can use to run your workflows automatically. Read more about it in the Github Actions documentation <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on">https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on</a>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>AutomaÃ§Ã£o bÃ¡sica de Recon utilizando o Github Actions</title>
      <link>https://fguisso.github.io/posts/github-actions-recon/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:45 -0300</pubDate>
      
      <guid>https://fguisso.github.io/posts/github-actions-recon/</guid>
      <description>DemostraÃ§Ã£o de como utilizar o Github Actions para automatizar um Recon</description>
      <content:encoded><![CDATA[<p>Atualmente vem crescendo o nÃºmero de empresas que utilizam soluÃ§Ãµes de CI(Continuous Integration) e CD(Continuous Deploy) para automatizar o processo do ciclo de vida do software(SLD). As ferramentas mais utilizadas sÃ£o Jenkins, Github Actions, Gitlab CI e por aÃ­ vai. Estas ferramentas trazem a facilidade de automatizar os testes de software, linters de cÃ³digo, criaÃ§Ã£o de releases e versÃµes finais do software.</p>
<p>No mundo da seguranÃ§a algumas empresas tambÃ©m jÃ¡ estÃ£o implementando os testes de seguranÃ§a estÃ¡ticos(SAST) e testes de composiÃ§Ã£o de software(SCA) comprometidos. A cada adiÃ§Ã£o de cÃ³digo ou feature, agora o software pode ser testado antes de ir para produÃ§Ã£o.</p>
<p>A ideia de trabalhar com ferramentas de seguranÃ§a no CI/CD vai alÃ©m do fato de automatizar tarefas, mas tambÃ©m de trazer a cultura de seguranÃ§a da informaÃ§Ã£o para os times de desenvolvedores e times de infraestrutura, a famosa cultura de DevSecOps. Muito importante no momento que passamos onde os times de desenvolvimento estÃ£o escalando absurdamente e nÃ£o temos especialistas de seguranÃ§a para acompanhar estes times.</p>
<h2 id="casos-de-usos-para-alÃ©m-dos-testes-estÃ¡ticossast-e-sca">Casos de usos para alÃ©m dos testes estÃ¡ticos(SAST e SCA)</h2>
<p>O caso mais simples de uso que podemos abordar Ã© testes dinÃ¢micos de seguranÃ§a agendados para acontecer periodicamente, levando em conta que a aplicaÃ§Ã£o jÃ¡ esteja em produÃ§Ã£o.</p>
<p>Outros casos interessantes seria a possibilidade de times de Red Team, se aproveitarem das notificaÃ§Ãµes de eventos de uma pipeline, para lanÃ§ar testes automatizados assim que comece o desenvolvimento de uma nova feature. Irei abordar este tema mais a fundo em outro artigo.</p>
<p>O que vamos explorar mais neste artigo Ã© o reconhecimento de aplicaÃ§Ã£o jÃ¡ em produÃ§Ã£o, onde vamos apontar um domÃ­nio para nosso CI que vai rodar periodicamente algumas ferramentas de reconhecimento, o que pode ser usado depois pelos times de seguranÃ§a para futuras anÃ¡lises de seguranÃ§a.</p>
<h2 id="github-e-github-actions">Github e Github Actions</h2>
<p>Vamos utilizar o Github para versionar e armazenar nosso projeto, entÃ£o acesse github.com e crie um novo repositÃ³rio. Agora vamos criar e editar alguns arquivos, caso vocÃª nÃ£o conheÃ§a bem o funcionamento do Github, pode usar a interface grÃ¡fica mesmo.
O Github Actions jÃ¡ Ã© um serviÃ§o habilitado do Github, bastando apenas que vocÃª coloque os arquivos de configuraÃ§Ã£o da pipeline em uma pasta chamada <code>.github/workflows</code> e todas as interaÃ§Ãµes e logs desta pipeline serÃ£o visÃ­veis na aba actions.</p>
<p>Para facilitar a criaÃ§Ã£o de pipelines, o Github Actions oferece as Actions, que sÃ£o conjuntos de configuraÃ§Ãµes e instalaÃ§Ãµes prontas para vocÃª utilizar na sua pipeline, sem a necessidade de vocÃª se preocupar com isso. Algumas Actions oficiais estÃ£o disponÃ­veis no Marketplace do Github, porÃ©m vocÃª pode utilizar diretamente qualquer Action que seja um repositÃ³rio no Github.</p>
<p>Saiba mais sobre as Actions aqui e o link para o marketplace.</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/5755568/158624544-226a1e59-fef5-441e-beca-73b66c30dd5d.png" alt="image"  />

<em>Exemplos de arquivos workflow separados.</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/5755568/158624831-2aebfc25-a58b-49b2-91cb-33d17f0f77c2.png" alt="image"  />

<em>Aba de recursos do Github Actions com workflows configurados.</em></p>
<h3 id="amass-action">Amass Action</h3>
<p>Amass de acordo com sua documentaÃ§Ã£o oficial:</p>
<p>O projeto OWASP Amass realiza mapeamento de rede de superfÃ­cies de ataque e descoberta de ativos externos usando coleta de informaÃ§Ãµes de cÃ³digo aberto e tÃ©cnicas de reconhecimento ativo.</p>
<p>Amass Ã© uma ferramenta muito poderosa que nos fornece funÃ§Ãµes para o reconhecimento e tambÃ©m para o gerenciamento das informaÃ§Ãµes coletadas. Em nosso caso, vamos utilizar o Amass Action apenas para enumerar um domÃ­nio e trazer o resultado em um arquivo txt para usar posteriormente.</p>
<p>Em seu repositÃ³rio crie um arquivo chamado <code>amass.yml</code> dentro da pasta <code>.github/workflows</code> e adicione estas configuraÃ§Ãµes e vamos analisar linha a linha o que estamos fazendo:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ðŸ”Ž Recon</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">recon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-go@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">go-version</span><span class="p">:</span><span class="w"> </span><span class="m">1.17</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Amass - Enumeration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">fguisso/amass-action@main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">domains</span><span class="p">:</span><span class="w"> </span><span class="l">owasp.org</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">brute</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">GitHub Workflow artifacts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-artifact@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Obs: arquivos .yml/.yaml sÃ£o fortemente identados, entÃ£o os tabs e espaÃ§os dentro do arquivo precisam estar corretos para nÃ£o acontecer erros. VocÃª pode utilizar o prÃ³prio Github para validar seu arquivo ou utilizar um linter de arquivos YAML.</p>
<p>Na primeira linha <code>name:</code> Ã© apenas um identificador para sua pipeline ser facilmente encontrada dentro da aba Actions do Github.</p>
<p>Depois do <code>on:</code> Ã© onde podemos automatizar para que o workflow inicie de acordo com algum evento programado, podendo ser acionada por um ou mais eventos, no momento escolhemos <code>workflow_dispatch:</code> para que ela fique disponÃ­vel no dashboard de Actions e possamos ativar a qualquer momento. Mais para o final veremos como disparar este workflow agendada para rodar 1 vez por semana, mas vocÃª tambÃ©m pode disparar usando eventos do Git como, disparar sempre que houver um Pull Request na branch de desenvolvimento, disparar apenas quando acontecer um Merge do branch principal.</p>
<p><code>jobs:</code> Ã© onde podemos separar Actions para rodar em paralelo, como estamos usando a versÃ£o Free do Github Actions, vamos tentar manter sempre apenas um job executando tudo o que precisarmos. <a href="https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow">Link da documentaÃ§Ã£o sobre jobs</a>.</p>
<p>Os primeiros <code>steps</code> vou resumir como apenas configuraÃ§Ãµes para compilar e rodar a ferramenta Amass que Ã© desenvolvida em Golang. Geralmente quando vocÃª for usar uma Action, as configuraÃ§Ãµes necessÃ¡rias estarÃ£o na documentaÃ§Ãµes, nÃ£o se preocupe.</p>
<p>Depois dos <code>steps</code> iniciais, vamos chamar o Amass Action utilizando o endereÃ§o da Action no Github, <code>uses: fguisso/amass-action@main</code> e passar alguns inputs de configuraÃ§Ãµes:</p>
<p><code>domains:</code> vou utilizar o domÃ­nio da owasp.org para ser nosso target, vocÃª pode utilizar o domÃ­nio de sua aplicaÃ§Ã£o ou tambÃ©m passar mais de um domÃ­nio separados por vÃ­rgula.</p>
<p>Vamos habilitar o <code>brute:</code> para fazer um brute force nas pesquisas encontradas e para finalizar vamos passar o nome do arquivo final <code>output: hosts.txt</code>, onde vamos armazenar os resultados.</p>
<p>Bom, atÃ© aqui jÃ¡ fizemos todo o processo de utilizar uma ferramenta pelo Github Actions, mas devido ao como funciona uma pipeline automatizada, todo <code>job</code> que rodamos, vai subir uma nova mÃ¡quina e no final do processo ela Ã© desligada e deletada, nÃ£o segurando nenhuma informaÃ§Ã£o ou arquivos criados. Sendo assim, precisamos pegar o nosso arquivo final <code>hosts.txt</code> e salvar em algum lugar para ser consultado posteriormente. Temos vÃ¡rias opÃ§Ãµes como fazer o upload do arquivo para outra mÃ¡quina, salvar o resultado no prÃ³prio repositÃ³rio Git, utilizando o Github Actions podemos tambÃ©m criar e interagir com as Issues ou Pull Request e o mais utilizado para serviÃ§os de CI/CD Ã© criar um artefato do seu <code>job</code>, que Ã© o que vamos fazer.</p>
<p>No ultimo <code>step</code> iniciamos uma outra Action que serve para fazer o upload de arquivos para os artefatos do seu workflow, apenas bastando passar o nome do arquivo atual e qual o nome final que ficarÃ¡ disponÃ­vel dentro dos artefatos deste workflow.</p>
<p>Agora vamos rodar nosso workflow manualmente, basta ir na aba Actions do seu repositÃ³rio, escolher o workflow Amass Enum e clicar no botÃ£o Run Workflow.
<img loading="lazy" src="https://user-images.githubusercontent.com/5755568/158627084-09f2ab97-6d95-439e-9241-6557a5e72aef.png" alt="image"  />
</p>
<p>Logo apos vocÃª podera ver seu workflow rodando e caso queira acompanhar os <code>steps</code> e logs, Ã© sÃ³ clicar no seu <code>job</code> <code>recon</code>.</p>
<p>Assim que o workflow finalizar todos os <code>steps</code> vocÃª vai conseguir ver os resultados e seu artefato estarÃ¡ disponÃ­vel para download:</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/5755568/158697555-07a8c02a-8132-45e8-ab55-4a3d790cf092.png" alt="image"  />
</p>
<h3 id="naabu-action">Naabu Action</h3>
<p>Naabu Ã© uma ferramenta de scan de portas, onde ele vai procurar as portas abertas e ativas de um determinado host. Os criadores do projeto mantÃ©m uma versÃ£o oficial de uma Github Actions para rodar o Naabu, entÃ£o vamos seguir a documentaÃ§Ã£o deles para seguir com o nosso workflow de recon.</p>
<p>Vamos adicionar a Naabu Action para fazermos o reconhecimento das portas dessa lista de domÃ­nios que o Amass nos entregou. Como um depende do resultado do outro, vamos colocar na sequÃªncia de <code>steps</code> para que seja executado logo em seguida caso nÃ£o tenha nenhum erro na execuÃ§Ã£o do passo anterior.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Naabu - Port Scannner</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">projectdiscovery/naabu-action@main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">list</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">urls.txt</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Como estamos trabalhando com apenas um <code>job</code>, o Github Actions sobe uma mÃ¡quina com algumas configuraÃ§Ãµes e ao final do processo esta mÃ¡quina vai ser desligada e removida, com tudo o que foi gerado dentro dela. JÃ¡ que nÃ£o finalizamos nosso <code>job</code> ainda, entÃ£o o arquivo <code>hosts.txt</code> ainda estÃ¡ disponÃ­vel. Caso vocÃª queira manter estes resultados, precisamos fazer como anteriormente e passar os arquivos de resultado para os artefatos deste <code>job</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">GitHub Workflow artifacts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-artifact@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hosts.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            hosts.txt
</span></span></span><span class="line"><span class="cl"><span class="sd">            urls.txt</span><span class="w">            
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Para simplificar, vamos passar os arquivos direto para apenas um artefato, assim o Github vai criar um arquivo .zip final para vocÃª com todos estes arquivos dentro.</p>
<h3 id="nuclei-action">Nuclei Action</h3>
<p>Nuclei Ã© uma ferramenta de scan de vulnerabilidades baseado em templates, com a ajuda da comunidade hoje existem mais de 1000 templates prontos para usar que vÃ£o testar sua aplicaÃ§Ã£o em busca de vulnerabilidades conhecidas. Assim como Naabu, tambÃ©m temos um Action oficial do Nuclei que vamos utilizar: <a href="https://github.com/marketplace/actions/nuclei-dast-scan">https://github.com/marketplace/actions/nuclei-dast-scan</a></p>
<p><strong>AtenÃ§Ã£o!</strong> Devido a um bug encontrado nas Actions do ProjectDiscovery, vou utilizar um fork proprio onde eu corrigi o problema, assim que a correÃ§Ã£o for incluida no projeto oficial, vou fazer o update do artigo e trocar <code>fguisso/nuclei-action@inputs</code> por <code>projectdiscovery/nuclei-action@main</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Nuclei - DAST Scan</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">fguisso/nuclei-action@inputs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">urls</span><span class="p">:</span><span class="w"> </span><span class="l">urls.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">nuclei.txt</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Com o resultado anterior, agora temos os hosts e suas portas ativas, vamos passar para o nuclei verificar se em todos estes serviÃ§os encontrados, achamos alguma vulnerabilidade.</p>
<h3 id="rodando-seu-workflow-manualmente">Rodando seu workflow manualmente</h3>
<p>Com tudo configurado, agora podemos rodar o nosso workflow manualmente. Basta acessar a aba Actions no seu repositÃ³rio, selecionar seu workflow e clicar em <code>Run workflow</code>.</p>
<p>VocÃª pode acompanhar a execuÃ§Ã£o do seu workflow ou apenas esperar atÃ© o Ã­cone ficar verde, o que quer dizer que todas os <code>steps</code> aconteceram de forma correta e provavelmente vocÃª pode baixar seus resultados no campo de artefatos.</p>
<p>Sempre que quiser, vocÃª pode atualizar o domÃ­nio que quer escanear e tambÃ©m pode acrescentar mais de um domÃ­nio utilizando apenas vÃ­rgulas para separÃ¡-los. Ex: <code>owasp.org,github.com</code>.</p>
<h3 id="eventos-para-automatizar">Eventos para automatizar</h3>
<p>Como jÃ¡ falado anteriormente, os workflows podem responder a eventos especÃ­ficos para poder rodar e aqui vamos apenas criar um agendamento, para que possamos rodar nosso workflow uma vez por semana.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">schedule</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">cron</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0 0 * * 0&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Podemos agendar usando expressÃµes cron schedule, assim nosso workflow vai executar uma vez por semana, toda segunda feira as 00:00.</p>
<p>NÃ£o remova a linha <code>workflow_dispatch</code> a nÃ£o ser que vocÃª jÃ¡ esteja certo de que nÃ£o vai usar mais o botÃ£o de disparo manual.</p>
<p>Aqui tem uma lista de outros eventos que vocÃª pode utilizar para executar seus workflows automaticamente. Leia mais sobre na documentaÃ§Ã£o do Github Actions <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on">https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on</a>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hacktoberfest Owasp</title>
      <link>https://fguisso.github.io/posts/hacktoberfest-owasp/</link>
      <pubDate>Sat, 05 Oct 2019 11:26:27 -0300</pubDate>
      
      <guid>https://fguisso.github.io/posts/hacktoberfest-owasp/</guid>
      <description>MÃªs de outubro chegou e todo mundo estÃ¡ correndo atrÃ¡s dos seus 4 PRâ€™s para ganhar uma camiseta da digitalocean!
Para quem nÃ£o sabe, no mÃªs de outubro acontece o Hacktoberfest, um evento online e global onde as pessoas sÃ£o premiadas por contribuir com cÃ³digo open source. Mais informaÃ§Ãµes vocÃª pode ver no site oficial do evento.
OWASP e seus projetos! A galera de seguranÃ§a da informaÃ§Ã£o sabe o quÃ£o importante sÃ£o as ferramentas que auxiliam no processo de anÃ¡lise de cÃ³digo e vulnerabilidades e agora Ã© a hora de contribuirmos com essas ferramentas e materiais.</description>
      <content:encoded><![CDATA[<p>MÃªs de outubro chegou e todo mundo estÃ¡ correndo atrÃ¡s dos seus 4 PRâ€™s para ganhar uma camiseta da digitalocean!</p>
<p>Para quem nÃ£o sabe, no mÃªs de outubro acontece o Hacktoberfest, um evento online e global onde as pessoas sÃ£o premiadas por contribuir com cÃ³digo open source. Mais informaÃ§Ãµes vocÃª pode ver no site oficial do <a href="https://hacktoberfest.digitalocean.com">evento</a>.</p>
<h1 id="owasp-e-seus-projetos">OWASP e seus projetos!</h1>
<p>A galera de seguranÃ§a da informaÃ§Ã£o sabe o quÃ£o importante sÃ£o as ferramentas que auxiliam no processo de anÃ¡lise de cÃ³digo e vulnerabilidades e agora Ã© a hora de contribuirmos com essas ferramentas e materiais.</p>
<p>Segue uma lista com os projetos mais interessantes da OWASP que podem te ajudar no trabalho e tambÃ©m aceitam que vocÃª contribua com o cÃ³digo ou documentaÃ§Ã£o:</p>
<h2 id="owasp-top-10">OWASP Top 10</h2>
<p>Ã‰ um documento de conscientizaÃ§Ã£o para seguranÃ§a de aplicaÃ§Ãµes web. Ele reÃºne os riscos mais crÃ­ticos de seguranÃ§a de aplicaÃ§Ãµes web. Nesta lista vocÃª pode encontrar algumas vulnerabilidades, como checar se sua aplicaÃ§Ã£o nÃ£o estÃ¡ vulnerÃ¡vel a elas e tambÃ©m algumas contramedidas. <a href="https://github.com/OWASP/Top10/issues">Github</a></p>
<h2 id="owasp-zed-attack-proxy-zap">OWASP Zed Attack Proxy (ZAP)</h2>
<p>O ZAP Ã© uma ferramenta de testes de vulnerabilidades popular entre profissionais de seguranÃ§a e pentesters. Ele pode te ajudar no processo de encontrar e tratar vulnerabilidades em suas aplicaÃ§Ãµes web. <a href="https://github.com/zaproxy/zaproxy/">Github</a> <a href="https://github.com/zaproxy/zap-extensions/">ExtensÃµes ZAP</a></p>
<h2 id="owasp-juice-shop-project">OWASP Juice Shop Project</h2>
<p>Como eles gostam de dizer, Ã© provavelmente a mais moderna e sofisticada aplicaÃ§Ã£o web insegura! Sim, Ã© isso mesmo, uma aplicaÃ§Ã£o insegura para vocÃª testar e aprender sobre as Top 10 vulnerabilidades, com todo um suporte de aprendizagem, livro e ferramentas para facilitar na hora de aprender. <a href="https://github.com/bkimminich/juice-shop">Github</a></p>
<h2 id="owasp-defectdojo">OWASP DefectDojo</h2>
<p>Uma Ã³tima ferramenta de gerenciamento de vulnerabilidades, otimiza o processo de teste, com ferramentas de modelagem, geraÃ§Ã£o de relatÃ³rios e mÃ©tricas. Pare de gastar uma fortuna com outros gerenciadores de vulnerabilidades e comece contribuindo com o cÃ³digo dessa poderosa ferramenta. <a href="https://github.com/DefectDojo/django-DefectDojo/">Github</a></p>
<h2 id="owasp-amass">OWASP Amass</h2>
<p>EnumeraÃ§Ã£o de DNS e mapeamento de infraestrutura com tÃ©cnicas para obter subdomÃ­nios com scraping na web, APIs e consultando bancos de dados pÃºblicos. Todo esse poder em uma simples ferramenta, vale a pena colocar no seu bat-cinto de utilidades. <a href="https://github.com/OWASP/Amass">Github</a></p>
<h2 id="owasp-d4n155">OWASP D4N155</h2>
<p>OSINT de uma maneira inteligente, este projeto cria wordlists baseado no conteÃºdo do seu alvo, juntamente com tÃ©cnicas de Google Dorks. Futuramente algumas features de inteligÃªncia de dados serÃ£o adicionados e vocÃª pode fazer parte do desenvolvimento desta ferramenta. <a href="https://github.com/OWASP/D4N155">Github</a></p>
<p>Estes sÃ£o alguns dos muitos projetos, caso vocÃª queira conhecer todos os projetos, pode dar uma olhada no <a href="https://www.owasp.org/index.php/Category:OWASP_Project#tab=Project_Inventory">repositÃ³rio de projetos</a>. Caso vocÃª queira participar dos projetos, entre no github do projeto ou entre em contato com o seu Project Leader.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hacktoberfest Owasp English</title>
      <link>https://fguisso.github.io/posts/hacktoberfest-owasp-en/</link>
      <pubDate>Sat, 05 Oct 2019 11:26:27 -0300</pubDate>
      
      <guid>https://fguisso.github.io/posts/hacktoberfest-owasp-en/</guid>
      <description>October is here and everyone is running after their 4 PR&amp;rsquo;s to win a digitalocean t-shirt!
For those who don&amp;rsquo;t know, in October there is Hacktoberfest, an online and global event where people are awarded for contributing open source code. More information you can see on the official website of the event.
OWASP and projects! The information security crowd knows how important the tools that assist in the process of code and vulnerability analysis are, and now is the time to contribute these tools and materials.</description>
      <content:encoded><![CDATA[<p>October is here and everyone is running after their 4 PR&rsquo;s to win a digitalocean t-shirt!</p>
<p>For those who don&rsquo;t know, in October there is Hacktoberfest, an online and global event where people are awarded for contributing open source code. More information you can see on the official website of the <a href="https://hacktoberfest.digitalocean.com">event</a>.</p>
<h1 id="owasp-and-projects">OWASP and projects!</h1>
<p>The information security crowd knows how important the tools that assist in the process of code and vulnerability analysis are, and now is the time to contribute these tools and materials.</p>
<p>Here&rsquo;s a list of the most interesting OWASP projects that can help you with your work and also accept that you contribute code or documentation:</p>
<h2 id="owasp-top-10">OWASP Top 10</h2>
<p>It is a web application security awareness document. It meets the most critical web application security risks. In this list you can find some vulnerabilities, such as checking if your application is not vulnerable to them and also some countermeasures. <a href="https://github.com/OWASP/Top10/issues">Github</a></p>
<h2 id="owasp-zed-attack-proxyzap">OWASP Zed Attack Proxy(ZAP)</h2>
<p>ZAP is a popular vulnerability testing tool among security professionals and pentesters. It can help you in the process of finding and addressing vulnerabilities in your web applications. <a href="https://github.com/zaproxy/zaproxy/">Github</a> <a href="https://github.com/zaproxy/zap-extensions/">ZAP Extensions</a></p>
<h2 id="owasp-juice-shop-project">OWASP Juice Shop Project</h2>
<p>As they like to say, it&rsquo;s probably the most modern and sophisticated insecure web application! Yes, that&rsquo;s right, an insecure application for you to test and learn about the Top 10 vulnerabilities, with a complete learning support, book and tools to make learning easier. <a href="https://github.com/bkimminich/juice-shop">Github</a></p>
<h2 id="owasp-defectdojo">OWASP DefectDojo</h2>
<p>A great vulnerability management tool, it streamlines the testing process with modeling, reporting, and metrics tools. Stop spending a fortune on other vulnerability managers and start contributing the code of this powerful tool. <a href="https://github.com/DefectDojo/django-DefectDojo/">Github</a></p>
<h2 id="owasp-amass">OWASP Amass</h2>
<p>DNS enumeration and infrastructure mapping with techniques for obtaining web-scraped subdomains, APIs, and querying public databases. All that power in one simple tool is worth putting in your utility belt-bat. <a href="https://github.com/OWASP/Amass">Github</a></p>
<h2 id="owasp-d4n155">OWASP D4N155</h2>
<p>OSINT In a smart way, this project creates wordlists based on the content of your target along with Google Dorks techniques. In the future some data intelligence features will be added and you can be part of the development of this tool. <a href="https://github.com/OWASP/D4N155">Github</a></p>
<p>These are some of the many projects, so if you want to know all the projects, you can check out the <a href="https://www.owasp.org/index.php/Category:OWASP_Project#tab=Project_Inventory">project repository</a>. If you would like to participate in the projects, log into the project github or contact your Project Leader.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Conhecendo a OWASP</title>
      <link>https://fguisso.github.io/posts/conhecendo-a-owasp/</link>
      <pubDate>Wed, 20 Mar 2019 20:42:45 -0300</pubDate>
      
      <guid>https://fguisso.github.io/posts/conhecendo-a-owasp/</guid>
      <description>Uma breve apresentaÃ§Ã£o da OWASP e seus projetos</description>
      <content:encoded><![CDATA[<h2 id="open-web-application-security-project">Open Web Application Security Project</h2>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/2000/1*o7CzvTK5nN9_dXMFYR2dJA.jpeg" alt=""  />
</p>
<h3 id="open-community">Open Community</h3>
<p>OWASP Ã© uma comunidade internacional aberta, dedicada em ajudar organizaÃ§Ãµes a manter, desenvolver, adquirir e operar aplicaÃ§Ãµes confiÃ¡veis. Com ferramentas, documentos, fÃ³runs e capÃ­tulos, abertas e gratuitas para qualquer pessoa interessada em melhorar a seguranÃ§a de suas aplicaÃ§Ãµes.</p>
<p>O projeto tambÃ©m mantem a FundaÃ§Ã£o OWASP, uma instituiÃ§Ã£o internacional para dar suporte aos projetos de longo prazo da comunidade.</p>
<h3 id="valores">Valores</h3>
<p>OPEN/ABERTO; <em>Tudo Ã© radicalmente transparente, desde as finanÃ§as atÃ© o nosso cÃ³digo.</em></p>
<p>INNOVATION/INOVAÃ‡ÃƒO; <em>Incentiva e apoia inovaÃ§Ãµes e experimentos para solucionar desafios de seguranÃ§a do software.</em></p>
<p>GLOBAL; <em>Qualquer pessoa em todo o mundo Ã© incentivada a participar da comunidade.</em></p>
<p>INTEGRITY/INTEGRIDADE; Ã‰ uma comunidade global honesta e verdadeira, neutra em relaÃ§Ã£o a fornecedores.</p>
<h2 id="projetos">Projetos</h2>
<p>Vamos apresentar agora alguns projetos conhecidos da OWASP, sempre lembrando que vocÃª pode encontrar todo o conteÃºdo aberto pela internet e tambÃ©m pode colaborar com a construÃ§Ã£o deles.</p>
<h3 id="owasp-top-10">OWASP Top 10</h3>
<p>Ã‰ um documento de conscientizaÃ§Ã£o para seguranÃ§a de aplicaÃ§Ãµes web. Ele reune os riscos mais crÃ­ticos de seguranÃ§a de aplicaÃ§Ãµes web. Nesta lista vocÃª pode encontrar algumas vulnerabilidades, como checar se sua aplicaÃ§Ã£o nÃ£o esta vulnerÃ¡vel a elas e tambÃ©m algumas contramedidas. <a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">Link do projeto</a>.</p>
<h3 id="owasp-zed-attack-proxy-zap">OWASP Zed Attack Proxy (ZAP)</h3>
<p>O ZAP Ã© uma ferramenta de testes de vulnerabilidades popular entre profissionais de seguranÃ§a e pentesters. Ele pode te ajudar no processo de encontrar e tratar vulnerabilidades em suas aplicaÃ§Ãµes web. <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">Link do projeto.</a></p>
<h3 id="owasp-offensive-web-testing-framework-owtf">OWASP Offensive Web Testing Framework (OWTF)</h3>
<p>TambÃ©m uma ferramenta para te auxiliar na busca de vulnerabilidades, o OWTF foi criado para automatizar estes processos e tornar os testes manuais e repetitivos menos chatos. Com suporte direto para os padrÃµes NTIS e PTES. <a href="https://owtf.github.io/">Link do projeto.</a></p>
<h3 id="owasp-juice-shop-project">OWASP Juice Shop Project</h3>
<p>Como eles gostam de dizer, *Ã© provavelmente a mais moderna e sofisticada aplicaÃ§Ã£o web insegura! *Sim, Ã© isso mesmo, uma aplicaÃ§Ã£o insegura para vocÃª testar e aprender sobre as Top 10 vulnerabilidades, com todo um suporte de aprendizagem, livro e ferramentas para facilitar na hora de aprender. <a href="https://www.owasp.org/index.php/OWASP_Juice_Shop_Project">Link do projeto.</a></p>
<p>Estes sÃ£o alguns dos muitos projetos, caso vocÃª queira conhecer todos os projetos, pode dar uma olhada no <a href="https://www.owasp.org/index.php/Category:OWASP_Project#tab=Project_Inventory">repositÃ³rio de projetos</a>. Caso vocÃª queira participar dos projetos, entre no github do projeto ou entre em contato com o seu Project Leader.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
